from random import choice

from aiogram.utils.markdown import hbold

import datetime
import locale
import re


def count_length(text: str) -> str:
    reference_text = "–ë–∞–Ω–∫ –ø–æ–∫—É–ø–∞–µ—Ç  "
    space_per_char = 1.5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ —Å–∏–º–≤–æ–ª (–ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏)

    diff = len(reference_text) - len(text)
    spaces = int(diff * space_per_char)

    return ' ' * max(spaces, 0) + '  ' + '  '

# GLOBAL
rand_animal_emoji = lambda : choice(['ü¶Ö', 'üêù', 'üê•', 'üê®', 'ü¶Å', 'üê∞', 'ü¶ä', 'üêº', 'üê∑', 'üê∏', 'üêô', 'ü¶ñ', 'üê≥', 'üê¨', 'üêä', 'ü¶ß', 'üêâ', 'üêÅ', 'ü¶•', 'ü¶©', 'ü¶ú', 'ü¶§'])


#GREET
GREET_TEXT = [hbold("What's up bro ‚úã"), f'–Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ {rand_animal_emoji()}']


#FINANCES
pretty_courses_test = lambda data: \
f'''
USD üíµ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ë–∞–Ω–∫ –ø–æ–∫—É–ø–∞–µ—Ç  –ë–∞–Ω–∫ –ø—Ä–æ–¥–∞–µ—Ç
{data["USD_in"]}{count_length(str(data["USD_in"]))}{data["USD_out"]}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

EUR üí∂
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ë–∞–Ω–∫ –ø–æ–∫—É–ø–∞–µ—Ç  –ë–∞–Ω–∫ –ø—Ä–æ–¥–∞–µ—Ç
{data["EUR_in"]}{count_length(str(data["EUR_in"]))}{data["EUR_out"]}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî


RUB / BUN üí∏
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ë–∞–Ω–∫ –ø–æ–∫—É–ø–∞–µ—Ç  –ë–∞–Ω–∫ –ø—Ä–æ–¥–∞–µ—Ç
{data["RUB_in"]}{count_length(str(data["RUB_in"]))}{data["RUB_out"]}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî


USD -> RUB (–∫–æ–Ω–≤–µ—Ä—Å–∏—è) üí∞
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ë–∞–Ω–∫ –ø–æ–∫—É–ø–∞–µ—Ç  –ë–∞–Ω–∫ –ø—Ä–æ–¥–∞–µ—Ç
{data["USD_RUB_in"]}{count_length(str(data["USD_RUB_in"]))}{data["USD_RUB_out"]}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

RUB -> EUR (–∫–æ–Ω–≤–µ—Ä—Å–∏—è) üí∞
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ë–∞–Ω–∫ –ø–æ–∫—É–ø–∞–µ—Ç  –ë–∞–Ω–∫ –ø—Ä–æ–¥–∞–µ—Ç
{data["RUB_EUR_in"]}{count_length(str(data["RUB_EUR_in"]))}{data["RUB_EUR_out"]}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
'''


# ERROR Texts
WRONG_TEXT = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü•≤ ..."


# Currency text
CALCULATE_MENU = hbold('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É)')
CURRENCY_TEXT = lambda curr: f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {hbold(curr)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:'
CURRENCY_TEXT2 = lambda curr_name, action, curr_value: (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {hbold(curr_name)} \n'
                                                f'({hbold(action)} –ø–æ –∫—É—Ä—Å—É = {hbold(curr_value)})\n\n'
                                                        f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ...')
currency_dict = {
    'USD_in': '$',
    'USD_out': 'Br',

    'EUR_in': '‚Ç¨',
    'EUR_out': 'Br',

    'RUB_in': '‚ÇΩ',
    'RUB_out': 'Br',

    'USD_RUB_in': '$',
    'USD_RUB_out': '‚ÇΩ',

    'RUB_EUR_in': '‚ÇΩ',
    'RUB_EUR_out': '‚Ç¨',
}


#Check_in text
START_CHECK_IN_TEXT = lambda res: "–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ 'check_in':" if res else "–£ –≤–∞—Å –Ω–µ—Ç 'check_in', —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å check_in')"


# Debts text
NO_DEBTS_TEXT = f'{hbold("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!!!")}\n\n–£—Ä–∞–∞–∞ üéâüéâüéâüéâ'
YES_DEBTS_TEXT = f'{hbold("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ–ª–≥–æ–≤ :(  ‚¨áÔ∏è")}'
DELETE_DEBT_TEXT = lambda bl: hbold("–î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!") if bl else hbold("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ ‚ùóÔ∏è")
ERROR_SAVE_DEBT_TEXT = f"–í—ã {hbold('–ù–ï –ó–ê–ü–û–õ–ù–ò–õ–ò')} –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ('–ù–∞–∑–≤–∞–Ω–∏–µ' –∏ '–°—É–º–º–∞')‚ùóÔ∏è"
START_CREATE_DEBTS_TEXT = f'''
{hbold('-  –ü—Ä–∞–≤–∏–ª–∞  –°–û–ó–î–ê–ù–ò–ï / –û–§–û–†–ú–õ–ï–ù–ò–ï  –¥–æ–ª–≥–∞:')}


1) {hbold("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ")} '–ù–∞–∑–≤–∞–Ω–∏–µ' –∏ '–°—É–º–º–∞';

2) {hbold("–ü–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ–æ—á–µ—Ä–µ–¥–∏!")}

3) –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∫–∞–∫–æ–µ –ª–∏–±–æ –ø–æ–ª–µ, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å–º–∞–π–ª–∏–∫ "‚úÖ" –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è;

4) –ï—Å–ª–∏ –≤—ã {hbold("–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ª–µ")}, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ —Å–Ω–æ–≤–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ;

5) –ï—Å–ª–∏ –≤—ã {hbold("–ü–ï–†–ï–î–£–ú–ê–õ–ò '—Å–æ–∑–¥–∞–≤–∞—Ç—å' –¥–æ–ª–≥")}, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è";
'''
UPDATE_DEBTS_TEXT = f'''
{hbold("–ü—Ä–∞–≤–∏–ª–∞  –û–ë–ù–û–í–õ–ï–ù–ò–Ø  –¥–æ–ª–≥–∞:")}


1) {hbold("–ü–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ–æ—á–µ—Ä–µ–¥–∏!")} (–º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π);

2) –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∫–∞–∫–æ–µ –ª–∏–±–æ –ø–æ–ª–µ, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å–º–∞–π–ª–∏–∫ "‚úÖ" –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è;

3) –ï—Å–ª–∏ –≤—ã {hbold("–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ª–µ")}, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ —Å–Ω–æ–≤–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ;

4) –ï—Å–ª–∏ –≤—ã {hbold("–ü–ï–†–ï–î–£–ú–ê–õ–ò '–æ–±–Ω–æ–≤–ª—è—Ç—å' –¥–æ–ª–≥")}, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è";
'''

# MINI DEBTS HELPERS FUNCTIONS
def convert_utc_to_belarus_local(utc_time_str: str) -> str:
    utc_dt = datetime.datetime.fromisoformat(utc_time_str).replace(tzinfo=datetime.timezone.utc)

    belarus_offset = datetime.timezone(datetime.timedelta(hours=3))

    local_dt = utc_dt.astimezone(belarus_offset)

    return local_dt.strftime("%Y-%m-%d / %H:%M:%S")


def subtract_datetimes(time1: str) -> str:
    try:
        dt1 = datetime.datetime.strptime(time1, "%Y-%m-%d %H:%M:%S")
        dt2 = datetime.datetime.now()

        delta: datetime.timedelta = dt1 - dt2

        if delta.total_seconds() < 0:
            return "0 –¥–Ω–µ–π; 0 —á–∞—Å–æ–≤, 0 –º–∏–Ω—É—Ç, 0 —Å–µ–∫—É–Ω–¥;"

        days = delta.days
        seconds = delta.seconds
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60

        return f"{days} –¥–Ω–µ–π; {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {secs} —Å–µ–∫—É–Ω–¥;"

    except Exception:
        return "0 –¥–Ω–µ–π; 0 —á–∞—Å–æ–≤, 0 –º–∏–Ω—É—Ç, 0 —Å–µ–∫—É–Ω–¥;"

# /MINI DEBTS HELPERS FUNCTIONS

priority_color = {
    'low': 'üü¢',
    'average': 'üü°',
    'high': 'üî¥',
}

def DEBT_SETTINGS_TEXT(data: dict) -> str:
    string = f'{hbold("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–≥–∞")}:  {data["title"]}\n'
    string += f'{hbold("–î–ê–¢–ê/–í–†–ï–ú–Ø —Å–æ–∑–¥–∞–Ω–∏—è:")}  {convert_utc_to_belarus_local(data["created_at"])}\n\n'
    if data["due_date"]:
        string += f'- {hbold("–°—Ä–æ–∫ –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞:")}  –¥–æ {data["due_date"]};\n- {hbold("–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞: /")}\n      {subtract_datetimes(data["due_date"])}\n\n'
    else:
        string += f'- {hbold("–°—Ä–æ–∫ –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞:")}  –ù–µ —É–∫–∞–∑–∞–Ω\n\n'
    string += f'- {hbold("–°—É–º–º–∞ –¥–æ–ª–≥–∞:")}  {data["amount"]}\n\n'
    string += f'- {hbold("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")}  {data["priority"]} ({priority_color.get(data["priority"] )})\n\n'
    if data["paid"]:
        string += f'- {hbold("–£–∂–µ –∑–∞–ø–ª–∞—á–µ–Ω–æ:")}  {data["paid"]} {data["amount"].split()[-1]}; {hbold("–û—Å—Ç–∞—Ç–æ–∫:")} {int(data["amount"].split()[0]) - int(data["paid"])} {data["amount"].split()[-1]}\n\n'
    else:
        string += f'- {hbold("–£–∂–µ –∑–∞–ø–ª–∞—á–µ–Ω–æ:")}  0; {hbold("–û—Å—Ç–∞—Ç–æ–∫:")}  {data["amount"]}\n\n'
    string += f'- {hbold("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:")}  {data["notes"] if data["notes"] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n\n'

    return string

def CONSTRUCTOR_DEBT_INPUT_VALUE_TEXT(value_name: str) -> str:
    if value_name == 'title':
        return f'''{hbold('- –í–≤–µ–¥–∏—Ç–µ "–ù–∞–∑–≤–∞–Ω–∏–µ" –¥–æ–ª–≥–∞')}\n\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: –ª—é–±–æ–π'''
    elif value_name == 'amount':
        return f'''{hbold('- –í–≤–µ–¥–∏—Ç–µ "–°—É–º–º—É" –¥–æ–ª–≥–∞')}\n\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–°—É–º–º–∞ –í–∞–ª—é—Ç–∞(BYN; USD; EUR; RUB)): \n1) '–°—É–º–º–∞' –¥–æ–ª–≥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º\n2) –ü—Ä–∏–º–µ—Ä: 1000 USD'''
    elif value_name == 'paid':
        return f'''{hbold('- –í–≤–µ–¥–∏—Ç–µ "–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è" –¥–æ–ª–≥–∞')}\n\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: \n1) '–°—É–º–º–∞' –¥–æ–ª–≥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º; –ü—Ä–∏–º–µ—Ä: 15'''
    elif value_name == 'priority':
        return f'''{hbold('- –í—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" –¥–æ–ª–≥–∞')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–π –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É ‚¨áÔ∏è'''
    elif value_name == 'due_date':
        return \
            f'''{hbold('- –í–≤–µ–¥–∏—Ç–µ "–î–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è" –¥–æ–ª–≥–∞')}\n\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: 
1) –¥–µ–Ω—å –º–µ—Å—è—Ü; –ü—Ä–∏–º–µ—Ä: 1 –º–∞—Ä—Ç–∞
2) –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö; –ü—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 3 –¥–Ω—è
'''
    elif value_name == 'is_closed':
        return f'''{hbold('- "–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞"')}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–ê' ‚¨áÔ∏è, —á—Ç–æ–±—ã –ø–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥;'''
    elif value_name == 'notes':
        return f'''{hbold('- –í—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ" –¥–ª—è –¥–æ–ª–≥–∞')}\n\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: –ª—é–±–æ–π'''